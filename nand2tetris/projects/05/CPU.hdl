// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // define: opCode, notOpCode, a, zx, nx, zy, ny, f, no, d1, d2, d3, j1, j2, j3,loadA

    And (a=instruction[15], b=true, out=opCode)
    Not (in=opCode, out=notOpCode)
    And(a=instruction[12], b=true, out=a)

    And(a=instruction[11], b=true, out=zx)
    And(a=instruction[10], b=true, out=nx)
    And(a=instruction[9], b=true, out=zy)
    And(a=instruction[8], b=true, out=ny)
    And(a=instruction[7], b=true, out=f)
    And(a=instruction[6], b=true, out=no)

    And(a=instruction[5], b=true, out=d1)
    And(a=instruction[4], b=true, out=d2)
    And(a=instruction[3], b=true, out=d3)

    And(a=instruction[2], b=true, out=j1)
    And(a=instruction[1], b=true, out=j2)
    And(a=instruction[0], b=true, out=j3)

    Or (a=d1, b=notOpCode, out=loadA)

    Mux16 (a=outALU, b=instruction, sel=opCode, out=mux1);
    ARegister (in=mux1, load=loadA, out=outA, out=addressM);

    Mux16 (a=outA, b=inM, sel=a, out=mux2);

    DRegister (in=outALU, load=d2, out=outD);
    ALU (x=outD, y=mux2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, zr=zr, ng=ng, out=outALU);


    PC (in=outA, load=, inc=, reset=reset, out=pc);
}
